buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://repo.spring.io/snapshot" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.9.2"
    }
}

apply plugin: 'docker-compose'

subprojects {
    apply plugin: 'java'
    targetCompatibility = 1.8
    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
        maven { url "https://repo.spring.io/snapshot" }
    }

    dependencies {
        implementation(platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")) {
            exclude group: 'org.apache.kafka'
            exclude group: 'ch.qos.logback'
        }

        implementation(platform("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"))

        implementation 'ch.qos.logback:logback-classic:1.2.9'
        implementation 'ch.qos.logback:logback-core:1.2.9'

        compile 'commons-lang:commons-lang:2.6'

        testCompile 'junit:junit:4.12'
        testCompile 'org.mockito:mockito-core:2.23.0'

    }
}

dockerCompose {
    projectName = null
    dockerComposeStopTimeout = java.time.Duration.ofSeconds(1)

    infrastructure {
        projectName = null
        startedServices = ["cdc-service", "zipkin", "mongodb"]
    }
}

composeBuild.dependsOn("assemble")
subprojects.each {
    if (it.name.endsWith("-service")) {
        composeUp.dependsOn(":" + it.name + ":assemble")
    }
}

task buildAndStartServicesMySql(type: GradleBuild) {
    tasks = ["composeUp"]
}

task endToEndTests(type: GradleBuild) {
    tasks = [":end-to-end-tests:test"]
}

endToEndTests.dependsOn(composeUp)
endToEndTests.dependsOn(":end-to-end-tests:cleanTest")

task stopServicesMySql(type: GradleBuild) {
    tasks = ["composeDown"]
}
